directive @goField(forceResolver: Boolean, name: String) on FIELD_DEFINITION | INPUT_FIELD_DEFINITION
directive @goModel(model: String, models: [String!]) on OBJECT | INPUT_OBJECT | SCALAR | ENUM | INTERFACE | UNION
"""
CreateNewsInput is used for create News object.
Input was generated by ent.
"""
input CreateNewsInput {
  uid: Int
  title: String!
  html: String!
  markdown: String!
  createdAt: Time
  updatedAt: Time
  userID: ID!
  tagIDs: [ID!]
}
"""
CreateTagInput is used for create Tag object.
Input was generated by ent.
"""
input CreateTagInput {
  title: String!
  createdAt: Time
  newsListIDs: [ID!]!
}
"""
CreateUserInput is used for create User object.
Input was generated by ent.
"""
input CreateUserInput {
  name: String!
  email: String!
  createdAt: Time
  updatedAt: Time
  createdNewsListIDs: [ID!]
}
"""
Define a Relay Cursor type:
https://relay.dev/graphql/connections.htm#sec-Cursor
"""
scalar Cursor
type News implements Node {
  id: ID!
  uid: Int!
  title: String!
  html: String!
  markdown: String!
  creatorID: ID!
  createdAt: Time!
  updatedAt: Time
  newsCreator: User! @goField(name: "user", forceResolver: false)
  tags: [Tag!]
}
"""Ordering options for News connections"""
input NewsOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order NewsSlice."""
  field: NewsOrderField!
}
"""Properties by which News connections can be ordered."""
enum NewsOrderField {
  UID
  TITLE
  HTML
  MARKDOWN
  CREATOR_ID
  CREATED_AT
  UPDATED_AT
}
"""
NewsWhereInput is used for filtering News objects.
Input was generated by ent.
"""
input NewsWhereInput {
  not: NewsWhereInput
  and: [NewsWhereInput!]
  or: [NewsWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """uid field predicates"""
  uid: Int
  uidNEQ: Int
  uidIn: [Int!]
  uidNotIn: [Int!]
  uidGT: Int
  uidGTE: Int
  uidLT: Int
  uidLTE: Int
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """html field predicates"""
  html: String
  htmlNEQ: String
  htmlIn: [String!]
  htmlNotIn: [String!]
  htmlGT: String
  htmlGTE: String
  htmlLT: String
  htmlLTE: String
  htmlContains: String
  htmlHasPrefix: String
  htmlHasSuffix: String
  htmlEqualFold: String
  htmlContainsFold: String
  """markdown field predicates"""
  markdown: String
  markdownNEQ: String
  markdownIn: [String!]
  markdownNotIn: [String!]
  markdownGT: String
  markdownGTE: String
  markdownLT: String
  markdownLTE: String
  markdownContains: String
  markdownHasPrefix: String
  markdownHasSuffix: String
  markdownEqualFold: String
  markdownContainsFold: String
  """creator_id field predicates"""
  creatorID: ID
  creatorIDNEQ: ID
  creatorIDIn: [ID!]
  creatorIDNotIn: [ID!]
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """user edge predicates"""
  hasUser: Boolean
  hasUserWith: [UserWhereInput!]
  """tags edge predicates"""
  hasTags: Boolean
  hasTagsWith: [TagWhereInput!]
}
"""
An object with an ID.
Follows the [Relay Global Object Identification Specification](https://relay.dev/graphql/objectidentification.htm)
"""
interface Node @goModel(model: "app/ent.Noder") {
  """The id of the object."""
  id: ID!
}
"""Possible directions in which to order a list of items when provided an `orderBy` argument."""
enum OrderDirection {
  """Specifies an ascending order for a given `orderBy` argument."""
  ASC
  """Specifies a descending order for a given `orderBy` argument."""
  DESC
}
"""
Information about pagination in a connection.
https://relay.dev/graphql/connections.htm#sec-undefined.PageInfo
"""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!
  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!
  """When paginating backwards, the cursor to continue."""
  startCursor: Cursor
  """When paginating forwards, the cursor to continue."""
  endCursor: Cursor
}
type Query {
  """Fetches an object given its ID."""
  node(
    """ID of the object."""
    id: ID!
  ): Node
  """Lookup nodes by a list of IDs."""
  nodes(
    """The list of node IDs."""
    ids: [ID!]!
  ): [Node]!
  news_list: [News!]!
  tags: [Tag!]!
  users: [User!]!
}
type Tag implements Node {
  id: ID!
  title: String!
  createdAt: Time!
  newsTags: [News!]! @goField(name: "newsList", forceResolver: false)
}
"""Ordering options for Tag connections"""
input TagOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Tags."""
  field: TagOrderField!
}
"""Properties by which Tag connections can be ordered."""
enum TagOrderField {
  TITLE
  CREATED_AT
}
"""
TagWhereInput is used for filtering Tag objects.
Input was generated by ent.
"""
input TagWhereInput {
  not: TagWhereInput
  and: [TagWhereInput!]
  or: [TagWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """title field predicates"""
  title: String
  titleNEQ: String
  titleIn: [String!]
  titleNotIn: [String!]
  titleGT: String
  titleGTE: String
  titleLT: String
  titleLTE: String
  titleContains: String
  titleHasPrefix: String
  titleHasSuffix: String
  titleEqualFold: String
  titleContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """news_list edge predicates"""
  hasNewsList: Boolean
  hasNewsListWith: [NewsWhereInput!]
}
"""The builtin Time type"""
scalar Time
"""
UpdateNewsInput is used for update News object.
Input was generated by ent.
"""
input UpdateNewsInput {
  title: String
  html: String
  markdown: String
  clearUpdatedAt: Boolean
  updatedAt: Time
  addTagIDs: [ID!]
  removeTagIDs: [ID!]
}
"""
UpdateUserInput is used for update User object.
Input was generated by ent.
"""
input UpdateUserInput {
  name: String
  clearUpdatedAt: Boolean
  updatedAt: Time
  addCreatedNewsListIDs: [ID!]
  removeCreatedNewsListIDs: [ID!]
}
type User implements Node {
  id: ID!
  name: String!
  email: String!
  createdAt: Time!
  updatedAt: Time
  createdNewsList: [News!]
}
"""Ordering options for User connections"""
input UserOrder {
  """The ordering direction."""
  direction: OrderDirection! = ASC
  """The field by which to order Users."""
  field: UserOrderField!
}
"""Properties by which User connections can be ordered."""
enum UserOrderField {
  NAME
  EMAIL
  CREATED_AT
  UPDATED_AT
}
"""
UserWhereInput is used for filtering User objects.
Input was generated by ent.
"""
input UserWhereInput {
  not: UserWhereInput
  and: [UserWhereInput!]
  or: [UserWhereInput!]
  """id field predicates"""
  id: ID
  idNEQ: ID
  idIn: [ID!]
  idNotIn: [ID!]
  idGT: ID
  idGTE: ID
  idLT: ID
  idLTE: ID
  """name field predicates"""
  name: String
  nameNEQ: String
  nameIn: [String!]
  nameNotIn: [String!]
  nameGT: String
  nameGTE: String
  nameLT: String
  nameLTE: String
  nameContains: String
  nameHasPrefix: String
  nameHasSuffix: String
  nameEqualFold: String
  nameContainsFold: String
  """email field predicates"""
  email: String
  emailNEQ: String
  emailIn: [String!]
  emailNotIn: [String!]
  emailGT: String
  emailGTE: String
  emailLT: String
  emailLTE: String
  emailContains: String
  emailHasPrefix: String
  emailHasSuffix: String
  emailEqualFold: String
  emailContainsFold: String
  """created_at field predicates"""
  createdAt: Time
  createdAtNEQ: Time
  createdAtIn: [Time!]
  createdAtNotIn: [Time!]
  createdAtGT: Time
  createdAtGTE: Time
  createdAtLT: Time
  createdAtLTE: Time
  """updated_at field predicates"""
  updatedAt: Time
  updatedAtNEQ: Time
  updatedAtIn: [Time!]
  updatedAtNotIn: [Time!]
  updatedAtGT: Time
  updatedAtGTE: Time
  updatedAtLT: Time
  updatedAtLTE: Time
  updatedAtIsNil: Boolean
  updatedAtNotNil: Boolean
  """created_news_list edge predicates"""
  hasCreatedNewsList: Boolean
  hasCreatedNewsListWith: [NewsWhereInput!]
}
