// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/newstagging"
	"app/ent/predicate"
	"app/ent/tag"
	"context"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// NewsTaggingQuery is the builder for querying NewsTagging entities.
type NewsTaggingQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.NewsTagging
	withNews   *NewsQuery
	withTag    *TagQuery
	modifiers  []func(*sql.Selector)
	loadTotal  []func(context.Context, []*NewsTagging) error
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NewsTaggingQuery builder.
func (ntq *NewsTaggingQuery) Where(ps ...predicate.NewsTagging) *NewsTaggingQuery {
	ntq.predicates = append(ntq.predicates, ps...)
	return ntq
}

// Limit adds a limit step to the query.
func (ntq *NewsTaggingQuery) Limit(limit int) *NewsTaggingQuery {
	ntq.limit = &limit
	return ntq
}

// Offset adds an offset step to the query.
func (ntq *NewsTaggingQuery) Offset(offset int) *NewsTaggingQuery {
	ntq.offset = &offset
	return ntq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (ntq *NewsTaggingQuery) Unique(unique bool) *NewsTaggingQuery {
	ntq.unique = &unique
	return ntq
}

// Order adds an order step to the query.
func (ntq *NewsTaggingQuery) Order(o ...OrderFunc) *NewsTaggingQuery {
	ntq.order = append(ntq.order, o...)
	return ntq
}

// QueryNews chains the current query on the "news" edge.
func (ntq *NewsTaggingQuery) QueryNews() *NewsQuery {
	query := &NewsQuery{config: ntq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(newstagging.Table, newstagging.NewsColumn, selector),
			sqlgraph.To(news.Table, news.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, newstagging.NewsTable, newstagging.NewsColumn),
		)
		fromU = sqlgraph.SetNeighbors(ntq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTag chains the current query on the "tag" edge.
func (ntq *NewsTaggingQuery) QueryTag() *TagQuery {
	query := &TagQuery{config: ntq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := ntq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := ntq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(newstagging.Table, newstagging.TagColumn, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, newstagging.TagTable, newstagging.TagColumn),
		)
		fromU = sqlgraph.SetNeighbors(ntq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first NewsTagging entity from the query.
// Returns a *NotFoundError when no NewsTagging was found.
func (ntq *NewsTaggingQuery) First(ctx context.Context) (*NewsTagging, error) {
	nodes, err := ntq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{newstagging.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (ntq *NewsTaggingQuery) FirstX(ctx context.Context) *NewsTagging {
	node, err := ntq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// Only returns a single NewsTagging entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one NewsTagging entity is found.
// Returns a *NotFoundError when no NewsTagging entities are found.
func (ntq *NewsTaggingQuery) Only(ctx context.Context) (*NewsTagging, error) {
	nodes, err := ntq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{newstagging.Label}
	default:
		return nil, &NotSingularError{newstagging.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (ntq *NewsTaggingQuery) OnlyX(ctx context.Context) *NewsTagging {
	node, err := ntq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// All executes the query and returns a list of NewsTaggings.
func (ntq *NewsTaggingQuery) All(ctx context.Context) ([]*NewsTagging, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return ntq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (ntq *NewsTaggingQuery) AllX(ctx context.Context) []*NewsTagging {
	nodes, err := ntq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// Count returns the count of the given query.
func (ntq *NewsTaggingQuery) Count(ctx context.Context) (int, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return ntq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (ntq *NewsTaggingQuery) CountX(ctx context.Context) int {
	count, err := ntq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (ntq *NewsTaggingQuery) Exist(ctx context.Context) (bool, error) {
	if err := ntq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return ntq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (ntq *NewsTaggingQuery) ExistX(ctx context.Context) bool {
	exist, err := ntq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NewsTaggingQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (ntq *NewsTaggingQuery) Clone() *NewsTaggingQuery {
	if ntq == nil {
		return nil
	}
	return &NewsTaggingQuery{
		config:     ntq.config,
		limit:      ntq.limit,
		offset:     ntq.offset,
		order:      append([]OrderFunc{}, ntq.order...),
		predicates: append([]predicate.NewsTagging{}, ntq.predicates...),
		withNews:   ntq.withNews.Clone(),
		withTag:    ntq.withTag.Clone(),
		// clone intermediate query.
		sql:    ntq.sql.Clone(),
		path:   ntq.path,
		unique: ntq.unique,
	}
}

// WithNews tells the query-builder to eager-load the nodes that are connected to
// the "news" edge. The optional arguments are used to configure the query builder of the edge.
func (ntq *NewsTaggingQuery) WithNews(opts ...func(*NewsQuery)) *NewsTaggingQuery {
	query := &NewsQuery{config: ntq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntq.withNews = query
	return ntq
}

// WithTag tells the query-builder to eager-load the nodes that are connected to
// the "tag" edge. The optional arguments are used to configure the query builder of the edge.
func (ntq *NewsTaggingQuery) WithTag(opts ...func(*TagQuery)) *NewsTaggingQuery {
	query := &TagQuery{config: ntq.config}
	for _, opt := range opts {
		opt(query)
	}
	ntq.withTag = query
	return ntq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		NewsID int `json:"news_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.NewsTagging.Query().
//		GroupBy(newstagging.FieldNewsID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (ntq *NewsTaggingQuery) GroupBy(field string, fields ...string) *NewsTaggingGroupBy {
	grbuild := &NewsTaggingGroupBy{config: ntq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := ntq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return ntq.sqlQuery(ctx), nil
	}
	grbuild.label = newstagging.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		NewsID int `json:"news_id,omitempty"`
//	}
//
//	client.NewsTagging.Query().
//		Select(newstagging.FieldNewsID).
//		Scan(ctx, &v)
func (ntq *NewsTaggingQuery) Select(fields ...string) *NewsTaggingSelect {
	ntq.fields = append(ntq.fields, fields...)
	selbuild := &NewsTaggingSelect{NewsTaggingQuery: ntq}
	selbuild.label = newstagging.Label
	selbuild.flds, selbuild.scan = &ntq.fields, selbuild.Scan
	return selbuild
}

func (ntq *NewsTaggingQuery) prepareQuery(ctx context.Context) error {
	for _, f := range ntq.fields {
		if !newstagging.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if ntq.path != nil {
		prev, err := ntq.path(ctx)
		if err != nil {
			return err
		}
		ntq.sql = prev
	}
	return nil
}

func (ntq *NewsTaggingQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*NewsTagging, error) {
	var (
		nodes       = []*NewsTagging{}
		_spec       = ntq.querySpec()
		loadedTypes = [2]bool{
			ntq.withNews != nil,
			ntq.withTag != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*NewsTagging).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &NewsTagging{config: ntq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(ntq.modifiers) > 0 {
		_spec.Modifiers = ntq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, ntq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := ntq.withNews; query != nil {
		if err := ntq.loadNews(ctx, query, nodes, nil,
			func(n *NewsTagging, e *News) { n.Edges.News = e }); err != nil {
			return nil, err
		}
	}
	if query := ntq.withTag; query != nil {
		if err := ntq.loadTag(ctx, query, nodes, nil,
			func(n *NewsTagging, e *Tag) { n.Edges.Tag = e }); err != nil {
			return nil, err
		}
	}
	for i := range ntq.loadTotal {
		if err := ntq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (ntq *NewsTaggingQuery) loadNews(ctx context.Context, query *NewsQuery, nodes []*NewsTagging, init func(*NewsTagging), assign func(*NewsTagging, *News)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NewsTagging)
	for i := range nodes {
		fk := nodes[i].NewsID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(news.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "news_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (ntq *NewsTaggingQuery) loadTag(ctx context.Context, query *TagQuery, nodes []*NewsTagging, init func(*NewsTagging), assign func(*NewsTagging, *Tag)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*NewsTagging)
	for i := range nodes {
		fk := nodes[i].TagID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(tag.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "tag_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (ntq *NewsTaggingQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := ntq.querySpec()
	if len(ntq.modifiers) > 0 {
		_spec.Modifiers = ntq.modifiers
	}
	_spec.Unique = false
	_spec.Node.Columns = nil
	return sqlgraph.CountNodes(ctx, ntq.driver, _spec)
}

func (ntq *NewsTaggingQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := ntq.First(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (ntq *NewsTaggingQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   newstagging.Table,
			Columns: newstagging.Columns,
		},
		From:   ntq.sql,
		Unique: true,
	}
	if unique := ntq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := ntq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		for i := range fields {
			_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
		}
	}
	if ps := ntq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := ntq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := ntq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := ntq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (ntq *NewsTaggingQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(ntq.driver.Dialect())
	t1 := builder.Table(newstagging.Table)
	columns := ntq.fields
	if len(columns) == 0 {
		columns = newstagging.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if ntq.sql != nil {
		selector = ntq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if ntq.unique != nil && *ntq.unique {
		selector.Distinct()
	}
	for _, p := range ntq.predicates {
		p(selector)
	}
	for _, p := range ntq.order {
		p(selector)
	}
	if offset := ntq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := ntq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// NewsTaggingGroupBy is the group-by builder for NewsTagging entities.
type NewsTaggingGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ntgb *NewsTaggingGroupBy) Aggregate(fns ...AggregateFunc) *NewsTaggingGroupBy {
	ntgb.fns = append(ntgb.fns, fns...)
	return ntgb
}

// Scan applies the group-by query and scans the result into the given value.
func (ntgb *NewsTaggingGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ntgb.path(ctx)
	if err != nil {
		return err
	}
	ntgb.sql = query
	return ntgb.sqlScan(ctx, v)
}

func (ntgb *NewsTaggingGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ntgb.fields {
		if !newstagging.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ntgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ntgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ntgb *NewsTaggingGroupBy) sqlQuery() *sql.Selector {
	selector := ntgb.sql.Select()
	aggregation := make([]string, 0, len(ntgb.fns))
	for _, fn := range ntgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ntgb.fields)+len(ntgb.fns))
		for _, f := range ntgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ntgb.fields...)...)
}

// NewsTaggingSelect is the builder for selecting fields of NewsTagging entities.
type NewsTaggingSelect struct {
	*NewsTaggingQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (nts *NewsTaggingSelect) Scan(ctx context.Context, v any) error {
	if err := nts.prepareQuery(ctx); err != nil {
		return err
	}
	nts.sql = nts.NewsTaggingQuery.sqlQuery(ctx)
	return nts.sqlScan(ctx, v)
}

func (nts *NewsTaggingSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := nts.sql.Query()
	if err := nts.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
