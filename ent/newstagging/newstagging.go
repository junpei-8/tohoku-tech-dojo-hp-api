// Code generated by ent, DO NOT EDIT.

package newstagging

const (
	// Label holds the string label denoting the newstagging type in the database.
	Label = "news_tagging"
	// FieldNewsID holds the string denoting the news_id field in the database.
	FieldNewsID = "news_id"
	// FieldTagID holds the string denoting the tag_id field in the database.
	FieldTagID = "tag_id"
	// EdgeNews holds the string denoting the news edge name in mutations.
	EdgeNews = "news"
	// EdgeTag holds the string denoting the tag edge name in mutations.
	EdgeTag = "tag"
	// NewsFieldID holds the string denoting the ID field of the News.
	NewsFieldID = "id"
	// TagFieldID holds the string denoting the ID field of the Tag.
	TagFieldID = "id"
	// Table holds the table name of the newstagging in the database.
	Table = "news_taggings"
	// NewsTable is the table that holds the news relation/edge.
	NewsTable = "news_taggings"
	// NewsInverseTable is the table name for the News entity.
	// It exists in this package in order to avoid circular dependency with the "news" package.
	NewsInverseTable = "news_list"
	// NewsColumn is the table column denoting the news relation/edge.
	NewsColumn = "news_id"
	// TagTable is the table that holds the tag relation/edge.
	TagTable = "news_taggings"
	// TagInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagInverseTable = "tags"
	// TagColumn is the table column denoting the tag relation/edge.
	TagColumn = "tag_id"
)

// Columns holds all SQL columns for newstagging fields.
var Columns = []string{
	FieldNewsID,
	FieldTagID,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}
