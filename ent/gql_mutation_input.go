// Code generated by ent, DO NOT EDIT.

package ent

import (
	"time"
)

// CreateNewsInput represents a mutation input for creating newsslice.
type CreateNewsInput struct {
	UID       *int
	Title     string
	HTML      string
	Markdown  string
	CreatedAt *time.Time
	UpdatedAt *time.Time
	UserID    int
	TagIDs    []int
}

// Mutate applies the CreateNewsInput on the NewsMutation builder.
func (i *CreateNewsInput) Mutate(m *NewsMutation) {
	if v := i.UID; v != nil {
		m.SetUID(*v)
	}
	m.SetTitle(i.Title)
	m.SetHTML(i.HTML)
	m.SetMarkdown(i.Markdown)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	m.SetUserID(i.UserID)
	if v := i.TagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
}

// SetInput applies the change-set in the CreateNewsInput on the NewsCreate builder.
func (c *NewsCreate) SetInput(i CreateNewsInput) *NewsCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateNewsInput represents a mutation input for updating newsslice.
type UpdateNewsInput struct {
	Title          *string
	HTML           *string
	Markdown       *string
	ClearUpdatedAt bool
	UpdatedAt      *time.Time
	AddTagIDs      []int
	RemoveTagIDs   []int
}

// Mutate applies the UpdateNewsInput on the NewsMutation builder.
func (i *UpdateNewsInput) Mutate(m *NewsMutation) {
	if v := i.Title; v != nil {
		m.SetTitle(*v)
	}
	if v := i.HTML; v != nil {
		m.SetHTML(*v)
	}
	if v := i.Markdown; v != nil {
		m.SetMarkdown(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AddTagIDs; len(v) > 0 {
		m.AddTagIDs(v...)
	}
	if v := i.RemoveTagIDs; len(v) > 0 {
		m.RemoveTagIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateNewsInput on the NewsUpdate builder.
func (c *NewsUpdate) SetInput(i UpdateNewsInput) *NewsUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateNewsInput on the NewsUpdateOne builder.
func (c *NewsUpdateOne) SetInput(i UpdateNewsInput) *NewsUpdateOne {
	i.Mutate(c.Mutation())
	return c
}

// CreateTagInput represents a mutation input for creating tags.
type CreateTagInput struct {
	Title       string
	CreatedAt   *time.Time
	NewsListIDs []int
}

// Mutate applies the CreateTagInput on the TagMutation builder.
func (i *CreateTagInput) Mutate(m *TagMutation) {
	m.SetTitle(i.Title)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.NewsListIDs; len(v) > 0 {
		m.AddNewsListIDs(v...)
	}
}

// SetInput applies the change-set in the CreateTagInput on the TagCreate builder.
func (c *TagCreate) SetInput(i CreateTagInput) *TagCreate {
	i.Mutate(c.Mutation())
	return c
}

// CreateUserInput represents a mutation input for creating users.
type CreateUserInput struct {
	Name               string
	Email              string
	CreatedAt          *time.Time
	UpdatedAt          *time.Time
	CreatedNewsListIDs []int
}

// Mutate applies the CreateUserInput on the UserMutation builder.
func (i *CreateUserInput) Mutate(m *UserMutation) {
	m.SetName(i.Name)
	m.SetEmail(i.Email)
	if v := i.CreatedAt; v != nil {
		m.SetCreatedAt(*v)
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.CreatedNewsListIDs; len(v) > 0 {
		m.AddCreatedNewsListIDs(v...)
	}
}

// SetInput applies the change-set in the CreateUserInput on the UserCreate builder.
func (c *UserCreate) SetInput(i CreateUserInput) *UserCreate {
	i.Mutate(c.Mutation())
	return c
}

// UpdateUserInput represents a mutation input for updating users.
type UpdateUserInput struct {
	Name                     *string
	ClearUpdatedAt           bool
	UpdatedAt                *time.Time
	AddCreatedNewsListIDs    []int
	RemoveCreatedNewsListIDs []int
}

// Mutate applies the UpdateUserInput on the UserMutation builder.
func (i *UpdateUserInput) Mutate(m *UserMutation) {
	if v := i.Name; v != nil {
		m.SetName(*v)
	}
	if i.ClearUpdatedAt {
		m.ClearUpdatedAt()
	}
	if v := i.UpdatedAt; v != nil {
		m.SetUpdatedAt(*v)
	}
	if v := i.AddCreatedNewsListIDs; len(v) > 0 {
		m.AddCreatedNewsListIDs(v...)
	}
	if v := i.RemoveCreatedNewsListIDs; len(v) > 0 {
		m.RemoveCreatedNewsListIDs(v...)
	}
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdate builder.
func (c *UserUpdate) SetInput(i UpdateUserInput) *UserUpdate {
	i.Mutate(c.Mutation())
	return c
}

// SetInput applies the change-set in the UpdateUserInput on the UserUpdateOne builder.
func (c *UserUpdateOne) SetInput(i UpdateUserInput) *UserUpdateOne {
	i.Mutate(c.Mutation())
	return c
}
