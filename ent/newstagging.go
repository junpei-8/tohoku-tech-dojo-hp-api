// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/newstagging"
	"app/ent/tag"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// NewsTagging is the model entity for the NewsTagging schema.
type NewsTagging struct {
	config `json:"-"`
	// NewsID holds the value of the "news_id" field.
	NewsID int `json:"news_id,omitempty"`
	// TagID holds the value of the "tag_id" field.
	TagID int `json:"tag_id,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the NewsTaggingQuery when eager-loading is set.
	Edges NewsTaggingEdges `json:"edges"`
}

// NewsTaggingEdges holds the relations/edges for other nodes in the graph.
type NewsTaggingEdges struct {
	// News holds the value of the news edge.
	News *News `json:"news,omitempty"`
	// Tag holds the value of the tag edge.
	Tag *Tag `json:"tag,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
	// totalCount holds the count of the edges above.
	totalCount [2]map[string]int
}

// NewsOrErr returns the News value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NewsTaggingEdges) NewsOrErr() (*News, error) {
	if e.loadedTypes[0] {
		if e.News == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: news.Label}
		}
		return e.News, nil
	}
	return nil, &NotLoadedError{edge: "news"}
}

// TagOrErr returns the Tag value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e NewsTaggingEdges) TagOrErr() (*Tag, error) {
	if e.loadedTypes[1] {
		if e.Tag == nil {
			// Edge was loaded but was not found.
			return nil, &NotFoundError{label: tag.Label}
		}
		return e.Tag, nil
	}
	return nil, &NotLoadedError{edge: "tag"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*NewsTagging) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case newstagging.FieldNewsID, newstagging.FieldTagID:
			values[i] = new(sql.NullInt64)
		default:
			return nil, fmt.Errorf("unexpected column %q for type NewsTagging", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the NewsTagging fields.
func (nt *NewsTagging) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case newstagging.FieldNewsID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field news_id", values[i])
			} else if value.Valid {
				nt.NewsID = int(value.Int64)
			}
		case newstagging.FieldTagID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field tag_id", values[i])
			} else if value.Valid {
				nt.TagID = int(value.Int64)
			}
		}
	}
	return nil
}

// QueryNews queries the "news" edge of the NewsTagging entity.
func (nt *NewsTagging) QueryNews() *NewsQuery {
	return (&NewsTaggingClient{config: nt.config}).QueryNews(nt)
}

// QueryTag queries the "tag" edge of the NewsTagging entity.
func (nt *NewsTagging) QueryTag() *TagQuery {
	return (&NewsTaggingClient{config: nt.config}).QueryTag(nt)
}

// Update returns a builder for updating this NewsTagging.
// Note that you need to call NewsTagging.Unwrap() before calling this method if this NewsTagging
// was returned from a transaction, and the transaction was committed or rolled back.
func (nt *NewsTagging) Update() *NewsTaggingUpdateOne {
	return (&NewsTaggingClient{config: nt.config}).UpdateOne(nt)
}

// Unwrap unwraps the NewsTagging entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (nt *NewsTagging) Unwrap() *NewsTagging {
	_tx, ok := nt.config.driver.(*txDriver)
	if !ok {
		panic("ent: NewsTagging is not a transactional entity")
	}
	nt.config.driver = _tx.drv
	return nt
}

// String implements the fmt.Stringer.
func (nt *NewsTagging) String() string {
	var builder strings.Builder
	builder.WriteString("NewsTagging(")
	builder.WriteString("news_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.NewsID))
	builder.WriteString(", ")
	builder.WriteString("tag_id=")
	builder.WriteString(fmt.Sprintf("%v", nt.TagID))
	builder.WriteByte(')')
	return builder.String()
}

// NewsTaggings is a parsable slice of NewsTagging.
type NewsTaggings []*NewsTagging

func (nt NewsTaggings) config(cfg config) {
	for _i := range nt {
		nt[_i].config = cfg
	}
}
