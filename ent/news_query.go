// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/newstagging"
	"app/ent/predicate"
	"app/ent/tag"
	"app/ent/user"
	"context"
	"database/sql/driver"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsQuery is the builder for querying News entities.
type NewsQuery struct {
	config
	limit                *int
	offset               *int
	unique               *bool
	order                []OrderFunc
	fields               []string
	predicates           []predicate.News
	withUser             *UserQuery
	withTags             *TagQuery
	withNewsTagging      *NewsTaggingQuery
	modifiers            []func(*sql.Selector)
	loadTotal            []func(context.Context, []*News) error
	withNamedTags        map[string]*TagQuery
	withNamedNewsTagging map[string]*NewsTaggingQuery
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the NewsQuery builder.
func (nq *NewsQuery) Where(ps ...predicate.News) *NewsQuery {
	nq.predicates = append(nq.predicates, ps...)
	return nq
}

// Limit adds a limit step to the query.
func (nq *NewsQuery) Limit(limit int) *NewsQuery {
	nq.limit = &limit
	return nq
}

// Offset adds an offset step to the query.
func (nq *NewsQuery) Offset(offset int) *NewsQuery {
	nq.offset = &offset
	return nq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (nq *NewsQuery) Unique(unique bool) *NewsQuery {
	nq.unique = &unique
	return nq
}

// Order adds an order step to the query.
func (nq *NewsQuery) Order(o ...OrderFunc) *NewsQuery {
	nq.order = append(nq.order, o...)
	return nq
}

// QueryUser chains the current query on the "user" edge.
func (nq *NewsQuery) QueryUser() *UserQuery {
	query := &UserQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, selector),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, news.UserTable, news.UserColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryTags chains the current query on the "tags" edge.
func (nq *NewsQuery) QueryTags() *TagQuery {
	query := &TagQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, selector),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, news.TagsTable, news.TagsPrimaryKey...),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// QueryNewsTagging chains the current query on the "news_tagging" edge.
func (nq *NewsQuery) QueryNewsTagging() *NewsTaggingQuery {
	query := &NewsTaggingQuery{config: nq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := nq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, selector),
			sqlgraph.To(newstagging.Table, newstagging.NewsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, news.NewsTaggingTable, news.NewsTaggingColumn),
		)
		fromU = sqlgraph.SetNeighbors(nq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first News entity from the query.
// Returns a *NotFoundError when no News was found.
func (nq *NewsQuery) First(ctx context.Context) (*News, error) {
	nodes, err := nq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{news.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (nq *NewsQuery) FirstX(ctx context.Context) *News {
	node, err := nq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first News ID from the query.
// Returns a *NotFoundError when no News ID was found.
func (nq *NewsQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{news.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (nq *NewsQuery) FirstIDX(ctx context.Context) int {
	id, err := nq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single News entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one News entity is found.
// Returns a *NotFoundError when no News entities are found.
func (nq *NewsQuery) Only(ctx context.Context) (*News, error) {
	nodes, err := nq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{news.Label}
	default:
		return nil, &NotSingularError{news.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (nq *NewsQuery) OnlyX(ctx context.Context) *News {
	node, err := nq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only News ID in the query.
// Returns a *NotSingularError when more than one News ID is found.
// Returns a *NotFoundError when no entities are found.
func (nq *NewsQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = nq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{news.Label}
	default:
		err = &NotSingularError{news.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (nq *NewsQuery) OnlyIDX(ctx context.Context) int {
	id, err := nq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of NewsSlice.
func (nq *NewsQuery) All(ctx context.Context) ([]*News, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return nq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (nq *NewsQuery) AllX(ctx context.Context) []*News {
	nodes, err := nq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of News IDs.
func (nq *NewsQuery) IDs(ctx context.Context) ([]int, error) {
	var ids []int
	if err := nq.Select(news.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (nq *NewsQuery) IDsX(ctx context.Context) []int {
	ids, err := nq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (nq *NewsQuery) Count(ctx context.Context) (int, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return nq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (nq *NewsQuery) CountX(ctx context.Context) int {
	count, err := nq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (nq *NewsQuery) Exist(ctx context.Context) (bool, error) {
	if err := nq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return nq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (nq *NewsQuery) ExistX(ctx context.Context) bool {
	exist, err := nq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the NewsQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (nq *NewsQuery) Clone() *NewsQuery {
	if nq == nil {
		return nil
	}
	return &NewsQuery{
		config:          nq.config,
		limit:           nq.limit,
		offset:          nq.offset,
		order:           append([]OrderFunc{}, nq.order...),
		predicates:      append([]predicate.News{}, nq.predicates...),
		withUser:        nq.withUser.Clone(),
		withTags:        nq.withTags.Clone(),
		withNewsTagging: nq.withNewsTagging.Clone(),
		// clone intermediate query.
		sql:    nq.sql.Clone(),
		path:   nq.path,
		unique: nq.unique,
	}
}

// WithUser tells the query-builder to eager-load the nodes that are connected to
// the "user" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NewsQuery) WithUser(opts ...func(*UserQuery)) *NewsQuery {
	query := &UserQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withUser = query
	return nq
}

// WithTags tells the query-builder to eager-load the nodes that are connected to
// the "tags" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NewsQuery) WithTags(opts ...func(*TagQuery)) *NewsQuery {
	query := &TagQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withTags = query
	return nq
}

// WithNewsTagging tells the query-builder to eager-load the nodes that are connected to
// the "news_tagging" edge. The optional arguments are used to configure the query builder of the edge.
func (nq *NewsQuery) WithNewsTagging(opts ...func(*NewsTaggingQuery)) *NewsQuery {
	query := &NewsTaggingQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	nq.withNewsTagging = query
	return nq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		UID int `json:"uid,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.News.Query().
//		GroupBy(news.FieldUID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (nq *NewsQuery) GroupBy(field string, fields ...string) *NewsGroupBy {
	grbuild := &NewsGroupBy{config: nq.config}
	grbuild.fields = append([]string{field}, fields...)
	grbuild.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := nq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return nq.sqlQuery(ctx), nil
	}
	grbuild.label = news.Label
	grbuild.flds, grbuild.scan = &grbuild.fields, grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		UID int `json:"uid,omitempty"`
//	}
//
//	client.News.Query().
//		Select(news.FieldUID).
//		Scan(ctx, &v)
func (nq *NewsQuery) Select(fields ...string) *NewsSelect {
	nq.fields = append(nq.fields, fields...)
	selbuild := &NewsSelect{NewsQuery: nq}
	selbuild.label = news.Label
	selbuild.flds, selbuild.scan = &nq.fields, selbuild.Scan
	return selbuild
}

func (nq *NewsQuery) prepareQuery(ctx context.Context) error {
	for _, f := range nq.fields {
		if !news.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if nq.path != nil {
		prev, err := nq.path(ctx)
		if err != nil {
			return err
		}
		nq.sql = prev
	}
	return nil
}

func (nq *NewsQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*News, error) {
	var (
		nodes       = []*News{}
		_spec       = nq.querySpec()
		loadedTypes = [3]bool{
			nq.withUser != nil,
			nq.withTags != nil,
			nq.withNewsTagging != nil,
		}
	)
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*News).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &News{config: nq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(nq.modifiers) > 0 {
		_spec.Modifiers = nq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, nq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := nq.withUser; query != nil {
		if err := nq.loadUser(ctx, query, nodes, nil,
			func(n *News, e *User) { n.Edges.User = e }); err != nil {
			return nil, err
		}
	}
	if query := nq.withTags; query != nil {
		if err := nq.loadTags(ctx, query, nodes,
			func(n *News) { n.Edges.Tags = []*Tag{} },
			func(n *News, e *Tag) { n.Edges.Tags = append(n.Edges.Tags, e) }); err != nil {
			return nil, err
		}
	}
	if query := nq.withNewsTagging; query != nil {
		if err := nq.loadNewsTagging(ctx, query, nodes,
			func(n *News) { n.Edges.NewsTagging = []*NewsTagging{} },
			func(n *News, e *NewsTagging) { n.Edges.NewsTagging = append(n.Edges.NewsTagging, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedTags {
		if err := nq.loadTags(ctx, query, nodes,
			func(n *News) { n.appendNamedTags(name) },
			func(n *News, e *Tag) { n.appendNamedTags(name, e) }); err != nil {
			return nil, err
		}
	}
	for name, query := range nq.withNamedNewsTagging {
		if err := nq.loadNewsTagging(ctx, query, nodes,
			func(n *News) { n.appendNamedNewsTagging(name) },
			func(n *News, e *NewsTagging) { n.appendNamedNewsTagging(name, e) }); err != nil {
			return nil, err
		}
	}
	for i := range nq.loadTotal {
		if err := nq.loadTotal[i](ctx, nodes); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (nq *NewsQuery) loadUser(ctx context.Context, query *UserQuery, nodes []*News, init func(*News), assign func(*News, *User)) error {
	ids := make([]int, 0, len(nodes))
	nodeids := make(map[int][]*News)
	for i := range nodes {
		fk := nodes[i].CreatorID
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	query.Where(user.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "creator_id" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}
func (nq *NewsQuery) loadTags(ctx context.Context, query *TagQuery, nodes []*News, init func(*News), assign func(*News, *Tag)) error {
	edgeIDs := make([]driver.Value, len(nodes))
	byID := make(map[int]*News)
	nids := make(map[int]map[*News]struct{})
	for i, node := range nodes {
		edgeIDs[i] = node.ID
		byID[node.ID] = node
		if init != nil {
			init(node)
		}
	}
	query.Where(func(s *sql.Selector) {
		joinT := sql.Table(news.TagsTable)
		s.Join(joinT).On(s.C(tag.FieldID), joinT.C(news.TagsPrimaryKey[1]))
		s.Where(sql.InValues(joinT.C(news.TagsPrimaryKey[0]), edgeIDs...))
		columns := s.SelectedColumns()
		s.Select(joinT.C(news.TagsPrimaryKey[0]))
		s.AppendSelect(columns...)
		s.SetDistinct(false)
	})
	if err := query.prepareQuery(ctx); err != nil {
		return err
	}
	neighbors, err := query.sqlAll(ctx, func(_ context.Context, spec *sqlgraph.QuerySpec) {
		assign := spec.Assign
		values := spec.ScanValues
		spec.ScanValues = func(columns []string) ([]any, error) {
			values, err := values(columns[1:])
			if err != nil {
				return nil, err
			}
			return append([]any{new(sql.NullInt64)}, values...), nil
		}
		spec.Assign = func(columns []string, values []any) error {
			outValue := int(values[0].(*sql.NullInt64).Int64)
			inValue := int(values[1].(*sql.NullInt64).Int64)
			if nids[inValue] == nil {
				nids[inValue] = map[*News]struct{}{byID[outValue]: struct{}{}}
				return assign(columns[1:], values[1:])
			}
			nids[inValue][byID[outValue]] = struct{}{}
			return nil
		}
	})
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected "tags" node returned %v`, n.ID)
		}
		for kn := range nodes {
			assign(kn, n)
		}
	}
	return nil
}
func (nq *NewsQuery) loadNewsTagging(ctx context.Context, query *NewsTaggingQuery, nodes []*News, init func(*News), assign func(*News, *NewsTagging)) error {
	fks := make([]driver.Value, 0, len(nodes))
	nodeids := make(map[int]*News)
	for i := range nodes {
		fks = append(fks, nodes[i].ID)
		nodeids[nodes[i].ID] = nodes[i]
		if init != nil {
			init(nodes[i])
		}
	}
	query.Where(predicate.NewsTagging(func(s *sql.Selector) {
		s.Where(sql.InValues(news.NewsTaggingColumn, fks...))
	}))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		fk := n.NewsID
		node, ok := nodeids[fk]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "news_id" returned %v for node %v`, fk, n)
		}
		assign(node, n)
	}
	return nil
}

func (nq *NewsQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := nq.querySpec()
	if len(nq.modifiers) > 0 {
		_spec.Modifiers = nq.modifiers
	}
	_spec.Node.Columns = nq.fields
	if len(nq.fields) > 0 {
		_spec.Unique = nq.unique != nil && *nq.unique
	}
	return sqlgraph.CountNodes(ctx, nq.driver, _spec)
}

func (nq *NewsQuery) sqlExist(ctx context.Context) (bool, error) {
	switch _, err := nq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

func (nq *NewsQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   news.Table,
			Columns: news.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: news.FieldID,
			},
		},
		From:   nq.sql,
		Unique: true,
	}
	if unique := nq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := nq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, news.FieldID)
		for i := range fields {
			if fields[i] != news.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := nq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := nq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := nq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := nq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (nq *NewsQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(nq.driver.Dialect())
	t1 := builder.Table(news.Table)
	columns := nq.fields
	if len(columns) == 0 {
		columns = news.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if nq.sql != nil {
		selector = nq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if nq.unique != nil && *nq.unique {
		selector.Distinct()
	}
	for _, p := range nq.predicates {
		p(selector)
	}
	for _, p := range nq.order {
		p(selector)
	}
	if offset := nq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := nq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// WithNamedTags tells the query-builder to eager-load the nodes that are connected to the "tags"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NewsQuery) WithNamedTags(name string, opts ...func(*TagQuery)) *NewsQuery {
	query := &TagQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedTags == nil {
		nq.withNamedTags = make(map[string]*TagQuery)
	}
	nq.withNamedTags[name] = query
	return nq
}

// WithNamedNewsTagging tells the query-builder to eager-load the nodes that are connected to the "news_tagging"
// edge with the given name. The optional arguments are used to configure the query builder of the edge.
func (nq *NewsQuery) WithNamedNewsTagging(name string, opts ...func(*NewsTaggingQuery)) *NewsQuery {
	query := &NewsTaggingQuery{config: nq.config}
	for _, opt := range opts {
		opt(query)
	}
	if nq.withNamedNewsTagging == nil {
		nq.withNamedNewsTagging = make(map[string]*NewsTaggingQuery)
	}
	nq.withNamedNewsTagging[name] = query
	return nq
}

// NewsGroupBy is the group-by builder for News entities.
type NewsGroupBy struct {
	config
	selector
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (ngb *NewsGroupBy) Aggregate(fns ...AggregateFunc) *NewsGroupBy {
	ngb.fns = append(ngb.fns, fns...)
	return ngb
}

// Scan applies the group-by query and scans the result into the given value.
func (ngb *NewsGroupBy) Scan(ctx context.Context, v any) error {
	query, err := ngb.path(ctx)
	if err != nil {
		return err
	}
	ngb.sql = query
	return ngb.sqlScan(ctx, v)
}

func (ngb *NewsGroupBy) sqlScan(ctx context.Context, v any) error {
	for _, f := range ngb.fields {
		if !news.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := ngb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := ngb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (ngb *NewsGroupBy) sqlQuery() *sql.Selector {
	selector := ngb.sql.Select()
	aggregation := make([]string, 0, len(ngb.fns))
	for _, fn := range ngb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(ngb.fields)+len(ngb.fns))
		for _, f := range ngb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(ngb.fields...)...)
}

// NewsSelect is the builder for selecting fields of News entities.
type NewsSelect struct {
	*NewsQuery
	selector
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (ns *NewsSelect) Scan(ctx context.Context, v any) error {
	if err := ns.prepareQuery(ctx); err != nil {
		return err
	}
	ns.sql = ns.NewsQuery.sqlQuery(ctx)
	return ns.sqlScan(ctx, v)
}

func (ns *NewsSelect) sqlScan(ctx context.Context, v any) error {
	rows := &sql.Rows{}
	query, args := ns.sql.Query()
	if err := ns.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}
