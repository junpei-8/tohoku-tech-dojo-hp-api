// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/newstagging"
	"app/ent/tag"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsTaggingCreate is the builder for creating a NewsTagging entity.
type NewsTaggingCreate struct {
	config
	mutation *NewsTaggingMutation
	hooks    []Hook
}

// SetNewsID sets the "news_id" field.
func (ntc *NewsTaggingCreate) SetNewsID(i int) *NewsTaggingCreate {
	ntc.mutation.SetNewsID(i)
	return ntc
}

// SetTagID sets the "tag_id" field.
func (ntc *NewsTaggingCreate) SetTagID(i int) *NewsTaggingCreate {
	ntc.mutation.SetTagID(i)
	return ntc
}

// SetNews sets the "news" edge to the News entity.
func (ntc *NewsTaggingCreate) SetNews(n *News) *NewsTaggingCreate {
	return ntc.SetNewsID(n.ID)
}

// SetTag sets the "tag" edge to the Tag entity.
func (ntc *NewsTaggingCreate) SetTag(t *Tag) *NewsTaggingCreate {
	return ntc.SetTagID(t.ID)
}

// Mutation returns the NewsTaggingMutation object of the builder.
func (ntc *NewsTaggingCreate) Mutation() *NewsTaggingMutation {
	return ntc.mutation
}

// Save creates the NewsTagging in the database.
func (ntc *NewsTaggingCreate) Save(ctx context.Context) (*NewsTagging, error) {
	var (
		err  error
		node *NewsTagging
	)
	if len(ntc.hooks) == 0 {
		if err = ntc.check(); err != nil {
			return nil, err
		}
		node, err = ntc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsTaggingMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = ntc.check(); err != nil {
				return nil, err
			}
			ntc.mutation = mutation
			if node, err = ntc.sqlSave(ctx); err != nil {
				return nil, err
			}
			return node, err
		})
		for i := len(ntc.hooks) - 1; i >= 0; i-- {
			if ntc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = ntc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, ntc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*NewsTagging)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NewsTaggingMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (ntc *NewsTaggingCreate) SaveX(ctx context.Context) *NewsTagging {
	v, err := ntc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntc *NewsTaggingCreate) Exec(ctx context.Context) error {
	_, err := ntc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntc *NewsTaggingCreate) ExecX(ctx context.Context) {
	if err := ntc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ntc *NewsTaggingCreate) check() error {
	if _, ok := ntc.mutation.NewsID(); !ok {
		return &ValidationError{Name: "news_id", err: errors.New(`ent: missing required field "NewsTagging.news_id"`)}
	}
	if _, ok := ntc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag_id", err: errors.New(`ent: missing required field "NewsTagging.tag_id"`)}
	}
	if _, ok := ntc.mutation.NewsID(); !ok {
		return &ValidationError{Name: "news", err: errors.New(`ent: missing required edge "NewsTagging.news"`)}
	}
	if _, ok := ntc.mutation.TagID(); !ok {
		return &ValidationError{Name: "tag", err: errors.New(`ent: missing required edge "NewsTagging.tag"`)}
	}
	return nil
}

func (ntc *NewsTaggingCreate) sqlSave(ctx context.Context) (*NewsTagging, error) {
	_node, _spec := ntc.createSpec()
	if err := sqlgraph.CreateNode(ctx, ntc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}

func (ntc *NewsTaggingCreate) createSpec() (*NewsTagging, *sqlgraph.CreateSpec) {
	var (
		_node = &NewsTagging{config: ntc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: newstagging.Table,
		}
	)
	if nodes := ntc.mutation.NewsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newstagging.NewsTable,
			Columns: []string{newstagging.NewsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: news.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.NewsID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := ntc.mutation.TagIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   newstagging.TagTable,
			Columns: []string{newstagging.TagColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.TagID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NewsTaggingCreateBulk is the builder for creating many NewsTagging entities in bulk.
type NewsTaggingCreateBulk struct {
	config
	builders []*NewsTaggingCreate
}

// Save creates the NewsTagging entities in the database.
func (ntcb *NewsTaggingCreateBulk) Save(ctx context.Context) ([]*NewsTagging, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ntcb.builders))
	nodes := make([]*NewsTagging, len(ntcb.builders))
	mutators := make([]Mutator, len(ntcb.builders))
	for i := range ntcb.builders {
		func(i int, root context.Context) {
			builder := ntcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsTaggingMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ntcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ntcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ntcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ntcb *NewsTaggingCreateBulk) SaveX(ctx context.Context) []*NewsTagging {
	v, err := ntcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ntcb *NewsTaggingCreateBulk) Exec(ctx context.Context) error {
	_, err := ntcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ntcb *NewsTaggingCreateBulk) ExecX(ctx context.Context) {
	if err := ntcb.Exec(ctx); err != nil {
		panic(err)
	}
}
