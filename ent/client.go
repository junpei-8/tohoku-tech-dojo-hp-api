// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"log"

	"app/ent/migrate"

	"app/ent/news"
	"app/ent/newstagging"
	"app/ent/tag"
	"app/ent/user"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// News is the client for interacting with the News builders.
	News *NewsClient
	// NewsTagging is the client for interacting with the NewsTagging builders.
	NewsTagging *NewsTaggingClient
	// Tag is the client for interacting with the Tag builders.
	Tag *TagClient
	// User is the client for interacting with the User builders.
	User *UserClient
	// additional fields for node api
	tables tables
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.News = NewNewsClient(c.config)
	c.NewsTagging = NewNewsTaggingClient(c.config)
	c.Tag = NewTagClient(c.config)
	c.User = NewUserClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		News:        NewNewsClient(cfg),
		NewsTagging: NewNewsTaggingClient(cfg),
		Tag:         NewTagClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, errors.New("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		ctx:         ctx,
		config:      cfg,
		News:        NewNewsClient(cfg),
		NewsTagging: NewNewsTaggingClient(cfg),
		Tag:         NewTagClient(cfg),
		User:        NewUserClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		News.
//		Query().
//		Count(ctx)
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.News.Use(hooks...)
	c.NewsTagging.Use(hooks...)
	c.Tag.Use(hooks...)
	c.User.Use(hooks...)
}

// NewsClient is a client for the News schema.
type NewsClient struct {
	config
}

// NewNewsClient returns a client for the News from the given config.
func NewNewsClient(c config) *NewsClient {
	return &NewsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `news.Hooks(f(g(h())))`.
func (c *NewsClient) Use(hooks ...Hook) {
	c.hooks.News = append(c.hooks.News, hooks...)
}

// Create returns a builder for creating a News entity.
func (c *NewsClient) Create() *NewsCreate {
	mutation := newNewsMutation(c.config, OpCreate)
	return &NewsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of News entities.
func (c *NewsClient) CreateBulk(builders ...*NewsCreate) *NewsCreateBulk {
	return &NewsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for News.
func (c *NewsClient) Update() *NewsUpdate {
	mutation := newNewsMutation(c.config, OpUpdate)
	return &NewsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsClient) UpdateOne(n *News) *NewsUpdateOne {
	mutation := newNewsMutation(c.config, OpUpdateOne, withNews(n))
	return &NewsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *NewsClient) UpdateOneID(id int) *NewsUpdateOne {
	mutation := newNewsMutation(c.config, OpUpdateOne, withNewsID(id))
	return &NewsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for News.
func (c *NewsClient) Delete() *NewsDelete {
	mutation := newNewsMutation(c.config, OpDelete)
	return &NewsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *NewsClient) DeleteOne(n *News) *NewsDeleteOne {
	return c.DeleteOneID(n.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *NewsClient) DeleteOneID(id int) *NewsDeleteOne {
	builder := c.Delete().Where(news.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &NewsDeleteOne{builder}
}

// Query returns a query builder for News.
func (c *NewsClient) Query() *NewsQuery {
	return &NewsQuery{
		config: c.config,
	}
}

// Get returns a News entity by its id.
func (c *NewsClient) Get(ctx context.Context, id int) (*News, error) {
	return c.Query().Where(news.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *NewsClient) GetX(ctx context.Context, id int) *News {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryUser queries the user edge of a News.
func (c *NewsClient) QueryUser(n *News) *UserQuery {
	query := &UserQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, id),
			sqlgraph.To(user.Table, user.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, news.UserTable, news.UserColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryTags queries the tags edge of a News.
func (c *NewsClient) QueryTags(n *News) *TagQuery {
	query := &TagQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, id),
			sqlgraph.To(tag.Table, tag.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, false, news.TagsTable, news.TagsPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNewsTagging queries the news_tagging edge of a News.
func (c *NewsClient) QueryNewsTagging(n *News) *NewsTaggingQuery {
	query := &NewsTaggingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := n.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(news.Table, news.FieldID, id),
			sqlgraph.To(newstagging.Table, newstagging.NewsColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, news.NewsTaggingTable, news.NewsTaggingColumn),
		)
		fromV = sqlgraph.Neighbors(n.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *NewsClient) Hooks() []Hook {
	return c.hooks.News
}

// NewsTaggingClient is a client for the NewsTagging schema.
type NewsTaggingClient struct {
	config
}

// NewNewsTaggingClient returns a client for the NewsTagging from the given config.
func NewNewsTaggingClient(c config) *NewsTaggingClient {
	return &NewsTaggingClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `newstagging.Hooks(f(g(h())))`.
func (c *NewsTaggingClient) Use(hooks ...Hook) {
	c.hooks.NewsTagging = append(c.hooks.NewsTagging, hooks...)
}

// Create returns a builder for creating a NewsTagging entity.
func (c *NewsTaggingClient) Create() *NewsTaggingCreate {
	mutation := newNewsTaggingMutation(c.config, OpCreate)
	return &NewsTaggingCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of NewsTagging entities.
func (c *NewsTaggingClient) CreateBulk(builders ...*NewsTaggingCreate) *NewsTaggingCreateBulk {
	return &NewsTaggingCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for NewsTagging.
func (c *NewsTaggingClient) Update() *NewsTaggingUpdate {
	mutation := newNewsTaggingMutation(c.config, OpUpdate)
	return &NewsTaggingUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *NewsTaggingClient) UpdateOne(nt *NewsTagging) *NewsTaggingUpdateOne {
	mutation := newNewsTaggingMutation(c.config, OpUpdateOne)
	mutation.news = &nt.NewsID
	mutation.tag = &nt.TagID
	return &NewsTaggingUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for NewsTagging.
func (c *NewsTaggingClient) Delete() *NewsTaggingDelete {
	mutation := newNewsTaggingMutation(c.config, OpDelete)
	return &NewsTaggingDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Query returns a query builder for NewsTagging.
func (c *NewsTaggingClient) Query() *NewsTaggingQuery {
	return &NewsTaggingQuery{
		config: c.config,
	}
}

// QueryNews queries the news edge of a NewsTagging.
func (c *NewsTaggingClient) QueryNews(nt *NewsTagging) *NewsQuery {
	return c.Query().
		Where(newstagging.NewsID(nt.NewsID), newstagging.TagID(nt.TagID)).
		QueryNews()
}

// QueryTag queries the tag edge of a NewsTagging.
func (c *NewsTaggingClient) QueryTag(nt *NewsTagging) *TagQuery {
	return c.Query().
		Where(newstagging.NewsID(nt.NewsID), newstagging.TagID(nt.TagID)).
		QueryTag()
}

// Hooks returns the client hooks.
func (c *NewsTaggingClient) Hooks() []Hook {
	return c.hooks.NewsTagging
}

// TagClient is a client for the Tag schema.
type TagClient struct {
	config
}

// NewTagClient returns a client for the Tag from the given config.
func NewTagClient(c config) *TagClient {
	return &TagClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `tag.Hooks(f(g(h())))`.
func (c *TagClient) Use(hooks ...Hook) {
	c.hooks.Tag = append(c.hooks.Tag, hooks...)
}

// Create returns a builder for creating a Tag entity.
func (c *TagClient) Create() *TagCreate {
	mutation := newTagMutation(c.config, OpCreate)
	return &TagCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Tag entities.
func (c *TagClient) CreateBulk(builders ...*TagCreate) *TagCreateBulk {
	return &TagCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Tag.
func (c *TagClient) Update() *TagUpdate {
	mutation := newTagMutation(c.config, OpUpdate)
	return &TagUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *TagClient) UpdateOne(t *Tag) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTag(t))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *TagClient) UpdateOneID(id int) *TagUpdateOne {
	mutation := newTagMutation(c.config, OpUpdateOne, withTagID(id))
	return &TagUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Tag.
func (c *TagClient) Delete() *TagDelete {
	mutation := newTagMutation(c.config, OpDelete)
	return &TagDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *TagClient) DeleteOne(t *Tag) *TagDeleteOne {
	return c.DeleteOneID(t.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *TagClient) DeleteOneID(id int) *TagDeleteOne {
	builder := c.Delete().Where(tag.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &TagDeleteOne{builder}
}

// Query returns a query builder for Tag.
func (c *TagClient) Query() *TagQuery {
	return &TagQuery{
		config: c.config,
	}
}

// Get returns a Tag entity by its id.
func (c *TagClient) Get(ctx context.Context, id int) (*Tag, error) {
	return c.Query().Where(tag.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *TagClient) GetX(ctx context.Context, id int) *Tag {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryNewsList queries the news_list edge of a Tag.
func (c *TagClient) QueryNewsList(t *Tag) *NewsQuery {
	query := &NewsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(news.Table, news.FieldID),
			sqlgraph.Edge(sqlgraph.M2M, true, tag.NewsListTable, tag.NewsListPrimaryKey...),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// QueryNewsTagging queries the news_tagging edge of a Tag.
func (c *TagClient) QueryNewsTagging(t *Tag) *NewsTaggingQuery {
	query := &NewsTaggingQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := t.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(tag.Table, tag.FieldID, id),
			sqlgraph.To(newstagging.Table, newstagging.TagColumn),
			sqlgraph.Edge(sqlgraph.O2M, true, tag.NewsTaggingTable, tag.NewsTaggingColumn),
		)
		fromV = sqlgraph.Neighbors(t.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *TagClient) Hooks() []Hook {
	return c.hooks.Tag
}

// UserClient is a client for the User schema.
type UserClient struct {
	config
}

// NewUserClient returns a client for the User from the given config.
func NewUserClient(c config) *UserClient {
	return &UserClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `user.Hooks(f(g(h())))`.
func (c *UserClient) Use(hooks ...Hook) {
	c.hooks.User = append(c.hooks.User, hooks...)
}

// Create returns a builder for creating a User entity.
func (c *UserClient) Create() *UserCreate {
	mutation := newUserMutation(c.config, OpCreate)
	return &UserCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of User entities.
func (c *UserClient) CreateBulk(builders ...*UserCreate) *UserCreateBulk {
	return &UserCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for User.
func (c *UserClient) Update() *UserUpdate {
	mutation := newUserMutation(c.config, OpUpdate)
	return &UserUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *UserClient) UpdateOne(u *User) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUser(u))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *UserClient) UpdateOneID(id int) *UserUpdateOne {
	mutation := newUserMutation(c.config, OpUpdateOne, withUserID(id))
	return &UserUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for User.
func (c *UserClient) Delete() *UserDelete {
	mutation := newUserMutation(c.config, OpDelete)
	return &UserDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a builder for deleting the given entity.
func (c *UserClient) DeleteOne(u *User) *UserDeleteOne {
	return c.DeleteOneID(u.ID)
}

// DeleteOne returns a builder for deleting the given entity by its id.
func (c *UserClient) DeleteOneID(id int) *UserDeleteOne {
	builder := c.Delete().Where(user.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &UserDeleteOne{builder}
}

// Query returns a query builder for User.
func (c *UserClient) Query() *UserQuery {
	return &UserQuery{
		config: c.config,
	}
}

// Get returns a User entity by its id.
func (c *UserClient) Get(ctx context.Context, id int) (*User, error) {
	return c.Query().Where(user.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *UserClient) GetX(ctx context.Context, id int) *User {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// QueryCreatedNewsList queries the created_news_list edge of a User.
func (c *UserClient) QueryCreatedNewsList(u *User) *NewsQuery {
	query := &NewsQuery{config: c.config}
	query.path = func(ctx context.Context) (fromV *sql.Selector, _ error) {
		id := u.ID
		step := sqlgraph.NewStep(
			sqlgraph.From(user.Table, user.FieldID, id),
			sqlgraph.To(news.Table, news.FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, user.CreatedNewsListTable, user.CreatedNewsListColumn),
		)
		fromV = sqlgraph.Neighbors(u.driver.Dialect(), step)
		return fromV, nil
	}
	return query
}

// Hooks returns the client hooks.
func (c *UserClient) Hooks() []Hook {
	return c.hooks.User
}
