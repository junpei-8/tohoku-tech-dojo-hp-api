// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/predicate"
	"app/ent/tag"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsUpdate is the builder for updating News entities.
type NewsUpdate struct {
	config
	hooks    []Hook
	mutation *NewsMutation
}

// Where appends a list predicates to the NewsUpdate builder.
func (nu *NewsUpdate) Where(ps ...predicate.News) *NewsUpdate {
	nu.mutation.Where(ps...)
	return nu
}

// SetTitle sets the "title" field.
func (nu *NewsUpdate) SetTitle(s string) *NewsUpdate {
	nu.mutation.SetTitle(s)
	return nu
}

// SetHTML sets the "html" field.
func (nu *NewsUpdate) SetHTML(s string) *NewsUpdate {
	nu.mutation.SetHTML(s)
	return nu
}

// SetMarkdown sets the "markdown" field.
func (nu *NewsUpdate) SetMarkdown(s string) *NewsUpdate {
	nu.mutation.SetMarkdown(s)
	return nu
}

// SetUpdatedAt sets the "updated_at" field.
func (nu *NewsUpdate) SetUpdatedAt(t time.Time) *NewsUpdate {
	nu.mutation.SetUpdatedAt(t)
	return nu
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nu *NewsUpdate) ClearUpdatedAt() *NewsUpdate {
	nu.mutation.ClearUpdatedAt()
	return nu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (nu *NewsUpdate) AddTagIDs(ids ...int) *NewsUpdate {
	nu.mutation.AddTagIDs(ids...)
	return nu
}

// AddTags adds the "tags" edges to the Tag entity.
func (nu *NewsUpdate) AddTags(t ...*Tag) *NewsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.AddTagIDs(ids...)
}

// Mutation returns the NewsMutation object of the builder.
func (nu *NewsUpdate) Mutation() *NewsMutation {
	return nu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (nu *NewsUpdate) ClearTags() *NewsUpdate {
	nu.mutation.ClearTags()
	return nu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (nu *NewsUpdate) RemoveTagIDs(ids ...int) *NewsUpdate {
	nu.mutation.RemoveTagIDs(ids...)
	return nu
}

// RemoveTags removes "tags" edges to Tag entities.
func (nu *NewsUpdate) RemoveTags(t ...*Tag) *NewsUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nu.RemoveTagIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (nu *NewsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	nu.defaults()
	if len(nu.hooks) == 0 {
		if err = nu.check(); err != nil {
			return 0, err
		}
		affected, err = nu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nu.check(); err != nil {
				return 0, err
			}
			nu.mutation = mutation
			affected, err = nu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(nu.hooks) - 1; i >= 0; i-- {
			if nu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, nu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (nu *NewsUpdate) SaveX(ctx context.Context) int {
	affected, err := nu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (nu *NewsUpdate) Exec(ctx context.Context) error {
	_, err := nu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nu *NewsUpdate) ExecX(ctx context.Context) {
	if err := nu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nu *NewsUpdate) defaults() {
	if _, ok := nu.mutation.UpdatedAt(); !ok && !nu.mutation.UpdatedAtCleared() {
		v := news.UpdateDefaultUpdatedAt()
		nu.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nu *NewsUpdate) check() error {
	if v, ok := nu.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if v, ok := nu.mutation.HTML(); ok {
		if err := news.HTMLValidator(v); err != nil {
			return &ValidationError{Name: "html", err: fmt.Errorf(`ent: validator failed for field "News.html": %w`, err)}
		}
	}
	if v, ok := nu.mutation.Markdown(); ok {
		if err := news.MarkdownValidator(v); err != nil {
			return &ValidationError{Name: "markdown", err: fmt.Errorf(`ent: validator failed for field "News.markdown": %w`, err)}
		}
	}
	if _, ok := nu.mutation.UserID(); nu.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "News.user"`)
	}
	return nil
}

func (nu *NewsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   news.Table,
			Columns: news.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: news.FieldID,
			},
		},
	}
	if ps := nu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nu.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldTitle,
		})
	}
	if value, ok := nu.mutation.HTML(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldHTML,
		})
	}
	if value, ok := nu.mutation.Markdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldMarkdown,
		})
	}
	if value, ok := nu.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: news.FieldUpdatedAt,
		})
	}
	if nu.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: news.FieldUpdatedAt,
		})
	}
	if nu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !nu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, nu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	return n, nil
}

// NewsUpdateOne is the builder for updating a single News entity.
type NewsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *NewsMutation
}

// SetTitle sets the "title" field.
func (nuo *NewsUpdateOne) SetTitle(s string) *NewsUpdateOne {
	nuo.mutation.SetTitle(s)
	return nuo
}

// SetHTML sets the "html" field.
func (nuo *NewsUpdateOne) SetHTML(s string) *NewsUpdateOne {
	nuo.mutation.SetHTML(s)
	return nuo
}

// SetMarkdown sets the "markdown" field.
func (nuo *NewsUpdateOne) SetMarkdown(s string) *NewsUpdateOne {
	nuo.mutation.SetMarkdown(s)
	return nuo
}

// SetUpdatedAt sets the "updated_at" field.
func (nuo *NewsUpdateOne) SetUpdatedAt(t time.Time) *NewsUpdateOne {
	nuo.mutation.SetUpdatedAt(t)
	return nuo
}

// ClearUpdatedAt clears the value of the "updated_at" field.
func (nuo *NewsUpdateOne) ClearUpdatedAt() *NewsUpdateOne {
	nuo.mutation.ClearUpdatedAt()
	return nuo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (nuo *NewsUpdateOne) AddTagIDs(ids ...int) *NewsUpdateOne {
	nuo.mutation.AddTagIDs(ids...)
	return nuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (nuo *NewsUpdateOne) AddTags(t ...*Tag) *NewsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.AddTagIDs(ids...)
}

// Mutation returns the NewsMutation object of the builder.
func (nuo *NewsUpdateOne) Mutation() *NewsMutation {
	return nuo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (nuo *NewsUpdateOne) ClearTags() *NewsUpdateOne {
	nuo.mutation.ClearTags()
	return nuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (nuo *NewsUpdateOne) RemoveTagIDs(ids ...int) *NewsUpdateOne {
	nuo.mutation.RemoveTagIDs(ids...)
	return nuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (nuo *NewsUpdateOne) RemoveTags(t ...*Tag) *NewsUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nuo.RemoveTagIDs(ids...)
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (nuo *NewsUpdateOne) Select(field string, fields ...string) *NewsUpdateOne {
	nuo.fields = append([]string{field}, fields...)
	return nuo
}

// Save executes the query and returns the updated News entity.
func (nuo *NewsUpdateOne) Save(ctx context.Context) (*News, error) {
	var (
		err  error
		node *News
	)
	nuo.defaults()
	if len(nuo.hooks) == 0 {
		if err = nuo.check(); err != nil {
			return nil, err
		}
		node, err = nuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nuo.check(); err != nil {
				return nil, err
			}
			nuo.mutation = mutation
			node, err = nuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(nuo.hooks) - 1; i >= 0; i-- {
			if nuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nuo.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nuo.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*News)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NewsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (nuo *NewsUpdateOne) SaveX(ctx context.Context) *News {
	node, err := nuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (nuo *NewsUpdateOne) Exec(ctx context.Context) error {
	_, err := nuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nuo *NewsUpdateOne) ExecX(ctx context.Context) {
	if err := nuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nuo *NewsUpdateOne) defaults() {
	if _, ok := nuo.mutation.UpdatedAt(); !ok && !nuo.mutation.UpdatedAtCleared() {
		v := news.UpdateDefaultUpdatedAt()
		nuo.mutation.SetUpdatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nuo *NewsUpdateOne) check() error {
	if v, ok := nuo.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.HTML(); ok {
		if err := news.HTMLValidator(v); err != nil {
			return &ValidationError{Name: "html", err: fmt.Errorf(`ent: validator failed for field "News.html": %w`, err)}
		}
	}
	if v, ok := nuo.mutation.Markdown(); ok {
		if err := news.MarkdownValidator(v); err != nil {
			return &ValidationError{Name: "markdown", err: fmt.Errorf(`ent: validator failed for field "News.markdown": %w`, err)}
		}
	}
	if _, ok := nuo.mutation.UserID(); nuo.mutation.UserCleared() && !ok {
		return errors.New(`ent: clearing a required unique edge "News.user"`)
	}
	return nil
}

func (nuo *NewsUpdateOne) sqlSave(ctx context.Context) (_node *News, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   news.Table,
			Columns: news.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: news.FieldID,
			},
		},
	}
	id, ok := nuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "News.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := nuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, news.FieldID)
		for _, f := range fields {
			if !news.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != news.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := nuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := nuo.mutation.Title(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldTitle,
		})
	}
	if value, ok := nuo.mutation.HTML(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldHTML,
		})
	}
	if value, ok := nuo.mutation.Markdown(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldMarkdown,
		})
	}
	if value, ok := nuo.mutation.UpdatedAt(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: news.FieldUpdatedAt,
		})
	}
	if nuo.mutation.UpdatedAtCleared() {
		_spec.Fields.Clear = append(_spec.Fields.Clear, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Column: news.FieldUpdatedAt,
		})
	}
	if nuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !nuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := nuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &News{config: nuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, nuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{news.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	return _node, nil
}
