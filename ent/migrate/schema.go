// Code generated by ent, DO NOT EDIT.

package migrate

import (
	"entgo.io/ent/dialect/entsql"
	"entgo.io/ent/dialect/sql/schema"
	"entgo.io/ent/schema/field"
)

var (
	// NewsListColumns holds the columns for the "news_list" table.
	NewsListColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "uid", Type: field.TypeInt, Unique: true},
		{Name: "title", Type: field.TypeString},
		{Name: "html", Type: field.TypeString, Size: 2147483647},
		{Name: "markdown", Type: field.TypeString, Size: 2147483647},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
		{Name: "creator_id", Type: field.TypeInt},
	}
	// NewsListTable holds the schema information for the "news_list" table.
	NewsListTable = &schema.Table{
		Name:       "news_list",
		Columns:    NewsListColumns,
		PrimaryKey: []*schema.Column{NewsListColumns[0]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "news_list_users_created_news_list",
				Columns:    []*schema.Column{NewsListColumns[7]},
				RefColumns: []*schema.Column{UsersColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "news_uid_title_creator_id_creator_id",
				Unique:  false,
				Columns: []*schema.Column{NewsListColumns[1], NewsListColumns[2], NewsListColumns[7], NewsListColumns[7]},
			},
		},
	}
	// NewsTaggingsColumns holds the columns for the "news_taggings" table.
	NewsTaggingsColumns = []*schema.Column{
		{Name: "news_id", Type: field.TypeInt},
		{Name: "tag_id", Type: field.TypeInt},
	}
	// NewsTaggingsTable holds the schema information for the "news_taggings" table.
	NewsTaggingsTable = &schema.Table{
		Name:       "news_taggings",
		Columns:    NewsTaggingsColumns,
		PrimaryKey: []*schema.Column{NewsTaggingsColumns[0], NewsTaggingsColumns[1]},
		ForeignKeys: []*schema.ForeignKey{
			{
				Symbol:     "news_taggings_news_list_news",
				Columns:    []*schema.Column{NewsTaggingsColumns[0]},
				RefColumns: []*schema.Column{NewsListColumns[0]},
				OnDelete:   schema.Cascade,
			},
			{
				Symbol:     "news_taggings_tags_tag",
				Columns:    []*schema.Column{NewsTaggingsColumns[1]},
				RefColumns: []*schema.Column{TagsColumns[0]},
				OnDelete:   schema.Cascade,
			},
		},
		Indexes: []*schema.Index{
			{
				Name:    "newstagging_news_id_tag_id_news_id_tag_id",
				Unique:  false,
				Columns: []*schema.Column{NewsTaggingsColumns[0], NewsTaggingsColumns[1], NewsTaggingsColumns[0], NewsTaggingsColumns[1]},
			},
		},
	}
	// TagsColumns holds the columns for the "tags" table.
	TagsColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "title", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
	}
	// TagsTable holds the schema information for the "tags" table.
	TagsTable = &schema.Table{
		Name:       "tags",
		Columns:    TagsColumns,
		PrimaryKey: []*schema.Column{TagsColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "tag_id_title",
				Unique:  false,
				Columns: []*schema.Column{TagsColumns[0], TagsColumns[1]},
			},
		},
	}
	// UsersColumns holds the columns for the "users" table.
	UsersColumns = []*schema.Column{
		{Name: "id", Type: field.TypeInt, Increment: true},
		{Name: "name", Type: field.TypeString},
		{Name: "email", Type: field.TypeString, Unique: true},
		{Name: "created_at", Type: field.TypeTime},
		{Name: "updated_at", Type: field.TypeTime, Nullable: true},
	}
	// UsersTable holds the schema information for the "users" table.
	UsersTable = &schema.Table{
		Name:       "users",
		Columns:    UsersColumns,
		PrimaryKey: []*schema.Column{UsersColumns[0]},
		Indexes: []*schema.Index{
			{
				Name:    "user_email",
				Unique:  false,
				Columns: []*schema.Column{UsersColumns[2]},
			},
		},
	}
	// Tables holds all the tables in the schema.
	Tables = []*schema.Table{
		NewsListTable,
		NewsTaggingsTable,
		TagsTable,
		UsersTable,
	}
)

func init() {
	NewsListTable.ForeignKeys[0].RefTable = UsersTable
	NewsListTable.Annotation = &entsql.Annotation{
		Table: "news_list",
	}
	NewsTaggingsTable.ForeignKeys[0].RefTable = NewsListTable
	NewsTaggingsTable.ForeignKeys[1].RefTable = TagsTable
}
