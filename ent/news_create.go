// Code generated by ent, DO NOT EDIT.

package ent

import (
	"app/ent/news"
	"app/ent/tag"
	"app/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// NewsCreate is the builder for creating a News entity.
type NewsCreate struct {
	config
	mutation *NewsMutation
	hooks    []Hook
}

// SetUID sets the "uid" field.
func (nc *NewsCreate) SetUID(i int) *NewsCreate {
	nc.mutation.SetUID(i)
	return nc
}

// SetNillableUID sets the "uid" field if the given value is not nil.
func (nc *NewsCreate) SetNillableUID(i *int) *NewsCreate {
	if i != nil {
		nc.SetUID(*i)
	}
	return nc
}

// SetTitle sets the "title" field.
func (nc *NewsCreate) SetTitle(s string) *NewsCreate {
	nc.mutation.SetTitle(s)
	return nc
}

// SetHTML sets the "html" field.
func (nc *NewsCreate) SetHTML(s string) *NewsCreate {
	nc.mutation.SetHTML(s)
	return nc
}

// SetMarkdown sets the "markdown" field.
func (nc *NewsCreate) SetMarkdown(s string) *NewsCreate {
	nc.mutation.SetMarkdown(s)
	return nc
}

// SetCreatorID sets the "creator_id" field.
func (nc *NewsCreate) SetCreatorID(i int) *NewsCreate {
	nc.mutation.SetCreatorID(i)
	return nc
}

// SetCreatedAt sets the "created_at" field.
func (nc *NewsCreate) SetCreatedAt(t time.Time) *NewsCreate {
	nc.mutation.SetCreatedAt(t)
	return nc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (nc *NewsCreate) SetNillableCreatedAt(t *time.Time) *NewsCreate {
	if t != nil {
		nc.SetCreatedAt(*t)
	}
	return nc
}

// SetUpdatedAt sets the "updated_at" field.
func (nc *NewsCreate) SetUpdatedAt(t time.Time) *NewsCreate {
	nc.mutation.SetUpdatedAt(t)
	return nc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (nc *NewsCreate) SetNillableUpdatedAt(t *time.Time) *NewsCreate {
	if t != nil {
		nc.SetUpdatedAt(*t)
	}
	return nc
}

// SetUserID sets the "user" edge to the User entity by ID.
func (nc *NewsCreate) SetUserID(id int) *NewsCreate {
	nc.mutation.SetUserID(id)
	return nc
}

// SetUser sets the "user" edge to the User entity.
func (nc *NewsCreate) SetUser(u *User) *NewsCreate {
	return nc.SetUserID(u.ID)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (nc *NewsCreate) AddTagIDs(ids ...int) *NewsCreate {
	nc.mutation.AddTagIDs(ids...)
	return nc
}

// AddTags adds the "tags" edges to the Tag entity.
func (nc *NewsCreate) AddTags(t ...*Tag) *NewsCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return nc.AddTagIDs(ids...)
}

// Mutation returns the NewsMutation object of the builder.
func (nc *NewsCreate) Mutation() *NewsMutation {
	return nc.mutation
}

// Save creates the News in the database.
func (nc *NewsCreate) Save(ctx context.Context) (*News, error) {
	var (
		err  error
		node *News
	)
	nc.defaults()
	if len(nc.hooks) == 0 {
		if err = nc.check(); err != nil {
			return nil, err
		}
		node, err = nc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*NewsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = nc.check(); err != nil {
				return nil, err
			}
			nc.mutation = mutation
			if node, err = nc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(nc.hooks) - 1; i >= 0; i-- {
			if nc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = nc.hooks[i](mut)
		}
		v, err := mut.Mutate(ctx, nc.mutation)
		if err != nil {
			return nil, err
		}
		nv, ok := v.(*News)
		if !ok {
			return nil, fmt.Errorf("unexpected node type %T returned from NewsMutation", v)
		}
		node = nv
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (nc *NewsCreate) SaveX(ctx context.Context) *News {
	v, err := nc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (nc *NewsCreate) Exec(ctx context.Context) error {
	_, err := nc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (nc *NewsCreate) ExecX(ctx context.Context) {
	if err := nc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (nc *NewsCreate) defaults() {
	if _, ok := nc.mutation.UID(); !ok {
		v := news.DefaultUID()
		nc.mutation.SetUID(v)
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		v := news.DefaultCreatedAt()
		nc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (nc *NewsCreate) check() error {
	if _, ok := nc.mutation.UID(); !ok {
		return &ValidationError{Name: "uid", err: errors.New(`ent: missing required field "News.uid"`)}
	}
	if _, ok := nc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "News.title"`)}
	}
	if v, ok := nc.mutation.Title(); ok {
		if err := news.TitleValidator(v); err != nil {
			return &ValidationError{Name: "title", err: fmt.Errorf(`ent: validator failed for field "News.title": %w`, err)}
		}
	}
	if _, ok := nc.mutation.HTML(); !ok {
		return &ValidationError{Name: "html", err: errors.New(`ent: missing required field "News.html"`)}
	}
	if v, ok := nc.mutation.HTML(); ok {
		if err := news.HTMLValidator(v); err != nil {
			return &ValidationError{Name: "html", err: fmt.Errorf(`ent: validator failed for field "News.html": %w`, err)}
		}
	}
	if _, ok := nc.mutation.Markdown(); !ok {
		return &ValidationError{Name: "markdown", err: errors.New(`ent: missing required field "News.markdown"`)}
	}
	if v, ok := nc.mutation.Markdown(); ok {
		if err := news.MarkdownValidator(v); err != nil {
			return &ValidationError{Name: "markdown", err: fmt.Errorf(`ent: validator failed for field "News.markdown": %w`, err)}
		}
	}
	if _, ok := nc.mutation.CreatorID(); !ok {
		return &ValidationError{Name: "creator_id", err: errors.New(`ent: missing required field "News.creator_id"`)}
	}
	if _, ok := nc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "News.created_at"`)}
	}
	if _, ok := nc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user", err: errors.New(`ent: missing required edge "News.user"`)}
	}
	return nil
}

func (nc *NewsCreate) sqlSave(ctx context.Context) (*News, error) {
	_node, _spec := nc.createSpec()
	if err := sqlgraph.CreateNode(ctx, nc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	return _node, nil
}

func (nc *NewsCreate) createSpec() (*News, *sqlgraph.CreateSpec) {
	var (
		_node = &News{config: nc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: news.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: news.FieldID,
			},
		}
	)
	if value, ok := nc.mutation.UID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: news.FieldUID,
		})
		_node.UID = value
	}
	if value, ok := nc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := nc.mutation.HTML(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldHTML,
		})
		_node.HTML = value
	}
	if value, ok := nc.mutation.Markdown(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: news.FieldMarkdown,
		})
		_node.Markdown = value
	}
	if value, ok := nc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: news.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if value, ok := nc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: news.FieldUpdatedAt,
		})
		_node.UpdatedAt = &value
	}
	if nodes := nc.mutation.UserIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   news.UserTable,
			Columns: []string{news.UserColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: user.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.CreatorID = nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := nc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   news.TagsTable,
			Columns: news.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeInt,
					Column: tag.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// NewsCreateBulk is the builder for creating many News entities in bulk.
type NewsCreateBulk struct {
	config
	builders []*NewsCreate
}

// Save creates the News entities in the database.
func (ncb *NewsCreateBulk) Save(ctx context.Context) ([]*News, error) {
	specs := make([]*sqlgraph.CreateSpec, len(ncb.builders))
	nodes := make([]*News, len(ncb.builders))
	mutators := make([]Mutator, len(ncb.builders))
	for i := range ncb.builders {
		func(i int, root context.Context) {
			builder := ncb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*NewsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, ncb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, ncb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, ncb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (ncb *NewsCreateBulk) SaveX(ctx context.Context) []*News {
	v, err := ncb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ncb *NewsCreateBulk) Exec(ctx context.Context) error {
	_, err := ncb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ncb *NewsCreateBulk) ExecX(ctx context.Context) {
	if err := ncb.Exec(ctx); err != nil {
		panic(err)
	}
}
