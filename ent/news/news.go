// Code generated by ent, DO NOT EDIT.

package news

import (
	"time"
)

const (
	// Label holds the string label denoting the news type in the database.
	Label = "news"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldUID holds the string denoting the uid field in the database.
	FieldUID = "uid"
	// FieldTitle holds the string denoting the title field in the database.
	FieldTitle = "title"
	// FieldHTML holds the string denoting the html field in the database.
	FieldHTML = "html"
	// FieldMarkdown holds the string denoting the markdown field in the database.
	FieldMarkdown = "markdown"
	// FieldCreatorID holds the string denoting the creator_id field in the database.
	FieldCreatorID = "creator_id"
	// FieldCreatedAt holds the string denoting the created_at field in the database.
	FieldCreatedAt = "created_at"
	// FieldUpdatedAt holds the string denoting the updated_at field in the database.
	FieldUpdatedAt = "updated_at"
	// EdgeUser holds the string denoting the user edge name in mutations.
	EdgeUser = "user"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeNewsTagging holds the string denoting the news_tagging edge name in mutations.
	EdgeNewsTagging = "news_tagging"
	// Table holds the table name of the news in the database.
	Table = "news_list"
	// UserTable is the table that holds the user relation/edge.
	UserTable = "news_list"
	// UserInverseTable is the table name for the User entity.
	// It exists in this package in order to avoid circular dependency with the "user" package.
	UserInverseTable = "users"
	// UserColumn is the table column denoting the user relation/edge.
	UserColumn = "creator_id"
	// TagsTable is the table that holds the tags relation/edge. The primary key declared below.
	TagsTable = "news_taggings"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// NewsTaggingTable is the table that holds the news_tagging relation/edge.
	NewsTaggingTable = "news_taggings"
	// NewsTaggingInverseTable is the table name for the NewsTagging entity.
	// It exists in this package in order to avoid circular dependency with the "newstagging" package.
	NewsTaggingInverseTable = "news_taggings"
	// NewsTaggingColumn is the table column denoting the news_tagging relation/edge.
	NewsTaggingColumn = "news_id"
)

// Columns holds all SQL columns for news fields.
var Columns = []string{
	FieldID,
	FieldUID,
	FieldTitle,
	FieldHTML,
	FieldMarkdown,
	FieldCreatorID,
	FieldCreatedAt,
	FieldUpdatedAt,
}

var (
	// TagsPrimaryKey and TagsColumn2 are the table columns denoting the
	// primary key for the tags relation (M2M).
	TagsPrimaryKey = []string{"news_id", "tag_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultUID holds the default value on creation for the "uid" field.
	DefaultUID func() int
	// TitleValidator is a validator for the "title" field. It is called by the builders before save.
	TitleValidator func(string) error
	// HTMLValidator is a validator for the "html" field. It is called by the builders before save.
	HTMLValidator func(string) error
	// MarkdownValidator is a validator for the "markdown" field. It is called by the builders before save.
	MarkdownValidator func(string) error
	// DefaultCreatedAt holds the default value on creation for the "created_at" field.
	DefaultCreatedAt func() time.Time
	// UpdateDefaultUpdatedAt holds the default value on update for the "updated_at" field.
	UpdateDefaultUpdatedAt func() time.Time
)
